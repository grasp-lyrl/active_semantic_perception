#!/usr/bin/env python3
"""Encode tasks as embeddings."""
import pathlib

import rospy
import yaml
from semantic_inference_msgs.msg import FeatureVectors
from semantic_inference_msgs.srv import EncodeFeature


def _parse_tasks(prefix):
    tasks_file = rospy.get_param(f"~{prefix}_file", "")
    tasks = rospy.get_param("~{prefix}", [])
    if tasks_file == "":
        return tasks

    tasks_file = pathlib.Path(tasks_file).expanduser().absolute()
    if not tasks_file.exists():
        rospy.logerr(f"[{rospy.get_name()}] Invalid {prefix} file @ {tasks_file}")
        return tasks

    with tasks_file.open("r") as fin:
        contents = yaml.safe_load(fin.read())
        return [x for x in contents]


class TaskServer:
    """Server to compute and distribute task embeddings."""

    def __init__(self):
        """Get embeddings for tasks."""
        self._object_pub = rospy.Publisher(
            "~objects", FeatureVectors, queue_size=1, latch=True
        )
        self._place_pub = rospy.Publisher(
            "~places", FeatureVectors, queue_size=1, latch=True
        )

        msg = self._embed_tasks(_parse_tasks("object_tasks"))
        self._object_pub.publish(msg)

        msg = self._embed_tasks(_parse_tasks("place_tasks"))
        self._place_pub.publish(msg)

    def _embed_tasks(self, tasks, service_name="semantic_inference/embed"):
        rospy.loginfo(f"[{rospy.get_name()}] Waiting for {service_name}")
        rospy.wait_for_service(service_name)
        proxy = rospy.ServiceProxy(service_name, EncodeFeature)
        rospy.loginfo(f"[{rospy.get_name()}] Encoding features for {tasks}")

        msg = FeatureVectors()
        for task in tasks:
            msg.names.append(task)
            msg.features.append(proxy(task).feature.feature)

        rospy.loginfo(f"[{rospy.get_name()}] Finished encoding features!")
        return msg

    def spin(self):
        """Wait for ros to shutdown."""
        rospy.spin()


def main():
    """Start the task server."""
    rospy.init_node("task_server")
    server = TaskServer()
    server.spin()


if __name__ == "__main__":
    main()
