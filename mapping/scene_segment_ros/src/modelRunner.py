import torch
import multiprocessing as mp
from detectron2.config import get_cfg
from detectron2.engine import DefaultPredictor
from detectron2.projects.deeplab import add_deeplab_config
from transformers import AutoImageProcessor, SegformerForSemanticSegmentation
from utils.helpers import getRootAbsolutePath, getFilteredSegments

DEVICE = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')


def pFCNInit(name: str, modelPath: str, configPath: str):
    """
    Initializes Detectron2 model based on Panoptic FCNconfig

    Parameters
    -------
    name: str
        The name of the model (in this case, FAST-SAM)
    modelPath: str
        The path to the model
    configPath: str
        The path to the model's specific configurations

    Returns
    -------
    model: str
        The initialized model
    """
    # Import
    from panopticfcn import add_panopticfcn_config
    # Initialization
    print(f'Initializing "{name}" model ...')
    # Convert to absolute path
    configPath = getRootAbsolutePath(configPath)
    modelPath = getRootAbsolutePath(modelPath)
    # Initialization
    cfg = get_cfg()
    add_panopticfcn_config(cfg)
    cfg.merge_from_file(configPath)
    cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5
    cfg.MODEL.WEIGHTS = modelPath
    cfg.DEVICE = DEVICE.type
    model = DefaultPredictor(cfg)
    print('Model loaded and is ready to use!\n')
    return model, cfg


def pFCNSegmenter(image, model, classes):
    """
    Segments the given image using Panoptic FCN

    Parameters
    -------
    image: Mat
        The input image for segmentation
    model: DefaultPredictor
        A predictor model based on Detectron 2
    classes: list
        The list of classes to be filtered

    Returns
    -------
    predictions: dict
        The results generated by the model containing segments
    """
    predictions = model(image)
    filteredPreds, predictionProbs = getFilteredSegments(predictions, classes)
    return filteredPreds, predictionProbs


def yosoInit(name: str, modelPath: str, configPath: str, confidence=0.5, overlap=0.98):
    """
    Initializes Detectron2 DEfaultPredictor model based 
    on YOSO config and returns it,

    Returns
    -------
    model: DefaultPredictor
        A detector model
    cfg: cfgNode
        The configuration to be later used in visualization
    """
    # Import
    from yoso.utils import addYosoConfig
    from yoso.yoso.segmentator import YOSO
    # Initialization
    print(f'Initializing "{name}" model ...')
    # Convert to absolute path
    configPath = getRootAbsolutePath(configPath)
    modelPath = getRootAbsolutePath(modelPath)
    # Configs
    cfg = get_cfg()
    addYosoConfig(cfg)
    cfg.merge_from_file(configPath)
    cfg.MODEL.RETINANET.SCORE_THRESH_TEST = confidence
    cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = confidence
    cfg.MODEL.PANOPTIC_FPN.COMBINE.INSTANCES_CONFIDENCE_THRESH = confidence
    cfg.MODEL.YOSO.TEST.OVERLAP_THRESHOLD = overlap
    cfg.MODEL.YOSO.TEST.OBJECT_MASK_THRESHOLD = confidence
    cfg.MODEL.WEIGHTS = modelPath
    cfg.MODEL.DEVICE = DEVICE.type
    cfg.freeze()
    # Create the model
    model = DefaultPredictor(cfg)
    print(f"Metadata: {model.metadata}")
    print('Model loaded and is ready to use!\n')
    return model, cfg


def yosoSegmenter(image, model, classes):
    """
    Segments the given image using Panoptic FCN

    Parameters
    -------
    image: Mat
        The input image for segmentation
    model: DefaultPredictor
        A predictor model based on Detectron 2
    classes: list
        The list of classes to be filtered

    Returns
    -------
    filteredSegments: dict
        The dictionary of filtered segments
    filteredProbs: np.ndarray
        The matrix of per pixel probabilities of shape (W, H, C)
    """
    predictions = model(image)
    filteredSegments, filteredProbs = getFilteredSegments(predictions, classes)
    return filteredSegments, filteredProbs
